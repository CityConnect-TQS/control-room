services:
  database:
    image: postgres:16.2
    environment:
      # Default user is postgres
      POSTGRES_DB: cityconnect
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - backend
    volumes:
      - pg_data:/var/lib/postgresql/data

  backend:
    depends_on:
      database:
        condition: service_healthy
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health | grep UP || exit 1"
      interval: 2s
      timeout: 2s
      retries: 100
      start_period: 2s
    environment:
      SPRING_APPLICATION_JSON: '{
            "spring.datasource.url": "jdbc:postgresql://database:5432/cityconnect",
            "spring.datasource.username": "postgres",
            "spring.datasource.password": "${POSTGRES_PASSWORD}",
            "spring.jpa.hibernate.ddl-auto": "update",
            "management.influx.metrics.export.enabled": "false",
            "currencyapi.apikey": "${CURRENCY_API_KEY}",
            "cityconnect.app.jwtPublicKey": "${JWT_PUBLIC}",
            "cityconnect.app.jwtPrivateKey": "${JWT_PRIVATE}",
            "cityconnect.app.jwtExpirationMs": "86400000",
            "springdoc.api-docs.path": "/api/docs-config",
            "springdoc.swagger-ui.url": "/api/docs-config",
            "springdoc.swagger-ui.path": "/api/docs/index.html",
            "trip.status.update.delay": "10000"
          }'
    restart: unless-stopped
    networks:
      - backend
    volumes:
      - maven_data:/root/.m2
    labels:
      - traefik.enable=true
      - traefik.http.routers.backend.rule=Host(`api.deti-tqs-16.ua.pt`)
      - traefik.http.services.backend.loadbalancer.server.port=8080
      - traefik.http.routers.backend.entrypoints=web

  client-portal:
    depends_on:
      backend:
        condition: service_healthy
    build:
      context: ./client-portal
      dockerfile: Dockerfile.prod
    volumes:
      - bun_cache:/root/.bun/install/cache
    networks:
      - frontend
    environment:
      - VITE_HOST_URL=deti-tqs-16.ua.pt
    labels:
      - traefik.enable=true
      - traefik.http.routers.client-portal.rule=Host(`deti-tqs-16.ua.pt`)
      - traefik.http.services.client-portal.loadbalancer.server.port=5173
      - traefik.http.routers.client-portal.entrypoints=web
  
  staff-portal:
    depends_on:
      backend:
        condition: service_healthy
    build:
      context: ./staff-portal
      dockerfile: Dockerfile.prod
    volumes:
      - bun_cache:/root/.bun/install/cache
    networks:
      - frontend
    environment:
      - VITE_HOST_URL=deti-tqs-16.ua.pt
    labels:
      - traefik.enable=true
      - traefik.http.routers.staff-portal.rule=Host(`staff.deti-tqs-16.ua.pt`)
      - traefik.http.services.staff-portal.loadbalancer.server.port=5173
      - traefik.http.routers.staff-portal.entrypoints=web

  digital-signage:
    depends_on:
      backend:
        condition: service_healthy
    build:
      context: ./digital-signage
      dockerfile: Dockerfile.prod
    volumes:
      - bun_cache:/root/.bun/install/cache
    networks:
      - frontend
    environment:
      - VITE_HOST_URL=deti-tqs-16.ua.pt
    labels:
      - traefik.enable=true
      - traefik.http.routers.digital-signage.rule=Host(`digital.deti-tqs-16.ua.pt`)
      - traefik.http.services.digital-signage.loadbalancer.server.port=5173
      - traefik.http.routers.digital-signage.entrypoints=web
  
  traefik:
    image: traefik:v2.11
    ports:
      - "80:80"
      - "8080:8080"
      - "443:443"
    depends_on:
      backend:
        condition: service_healthy
      client-portal:
        condition: service_started
      staff-portal:
        condition: service_started
      digital-signage:
        condition: service_started
    networks:
      - backend
      - frontend
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./proxy/traefik.prod.yml:/etc/traefik/traefik.yml

volumes:
  bun_cache:
  maven_data:
  pg_data:

networks:
  backend:
  frontend:
